using System;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Globalization;
using System.IO.Ports;
using System.Text;
using System.Threading;
using UnityEngine;
using Debug = UnityEngine.Debug;

public class SimpleMovement : MonoBehaviour
{
    private string portName = "COM3"; //testing using Arduino
    public int baud = 115200;
    public int readTimeoutMs = 200;

    SerialPort sp;
    Thread reader;
    volatile bool running;
    readonly ConcurrentQueue<string> inbox = new ConcurrentQueue<string>();

    public float moveSpeed = 0.1f;
    public float rotationSpeed = 10f;

    void Start()
    {
        Debug.Log("Ports: " + string.Join(", ", SerialPort.GetPortNames()));

        sp = new SerialPort(portName, baud)
        {
            NewLine = "\n",
            ReadTimeout = readTimeoutMs,
            DtrEnable = true,      // helpful for many USB CDC adapters
            RtsEnable = true,
            Encoding = Encoding.ASCII
        };

        try
        {
            sp.Open();
            running = true;
            reader = new Thread(ReadLoop) { IsBackground = true };
            reader.Start();
            Debug.Log($"Opened {sp.PortName} @ {baud}");
        }
        catch (Exception ex)
        {
            Debug.LogError("Open failed: " + ex.Message);
        }
    }

    void ReadLoop()
    {
        while (running && sp != null && sp.IsOpen)
        {
            try
            {
                string line = sp.ReadLine();          // blocks until '\n' or timeout
                if (!string.IsNullOrWhiteSpace(line))
                    inbox.Enqueue(line.Trim());
            }
            catch (TimeoutException) { /* ignore */ }
            catch (InvalidOperationException) { break; }     // port closed
            catch (System.IO.IOException) { /* transient; continue */ }
        }
    }

    void Update()
    {
        int n = 0;
        while (n++ < 5 && inbox.TryDequeue(out var msg))
        {
            // Debug: log the incoming message
            Debug.Log("Received message: " + msg);

            // Remove the square brackets and split by comma
            string[] parts = msg.Trim('[', ']').Split(',');

            // Check if there are exactly 6 values (x, y, z, yaw, pitch, roll)
            if (parts.Length == 6)
            {
                try
                {
                    // Convert each part to float using InvariantCulture to avoid issues with locale-specific number formats
                    float x = float.Parse(parts[0].Trim(), CultureInfo.InvariantCulture);
                    float y = float.Parse(parts[1].Trim(), CultureInfo.InvariantCulture);
                    float z = float.Parse(parts[2].Trim(), CultureInfo.InvariantCulture);
                    float yaw = float.Parse(parts[3].Trim(), CultureInfo.InvariantCulture);
                    float pitch = float.Parse(parts[4].Trim(), CultureInfo.InvariantCulture);
                    float roll = float.Parse(parts[5].Trim(), CultureInfo.InvariantCulture);

                    // Use the parsed values to apply movement and rotation
                    Vector3 move = new Vector3(x, y, z);
                    transform.Translate(move * moveSpeed * Time.deltaTime, Space.World);

                    Vector3 rotation = new Vector3(pitch, yaw, roll);
                    transform.Rotate(rotation * rotationSpeed * Time.deltaTime, Space.Self);
                }
                catch (FormatException e)
                {
                    Debug.LogError("Error parsing message: " + msg + ". Exception: " + e.Message);
                }
            }
            else
            {
                Debug.LogWarning("Invalid message format. Expected 6 values, got " + parts.Length);
            }
        }
    }

    void OnDisable() => ClosePort();
    void OnApplicationQuit() => ClosePort();

    void ClosePort()
    {
        running = false;
        try { reader?.Join(300); } catch { }
        try { if (sp?.IsOpen == true) sp.Close(); } catch { }
        try { sp?.Dispose(); } catch { }
        reader = null; sp = null;
    }

    private void onCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Skin"))
        {
            Debug.Log("Knife hits the skin!");
        }
    }
}
